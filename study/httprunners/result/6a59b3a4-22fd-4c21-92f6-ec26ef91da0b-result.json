{"name": "jiekouceshi", "status": "broken", "statusDetails": {"message": "httprunner.exceptions.ValidationFailure: assert body.pwd equal 123(str)\t==> fail\ncheck_item: body.pwd\ncheck_value: 123456(str)\nassert_method: equal\nexpect_value: 123(str)", "trace": "self = <study.httprunners.login1_test.TestCaseLogin1 object at 0x03DE8850>\nparam = None\n\n    def test_start(self, param: Dict = None) -> \"HttpRunner\":\n        \"\"\"main entrance, discovered by pytest\"\"\"\n        self.__init_tests__()\n        self.__project_meta = self.__project_meta or load_project_meta(\n            self.__config.path\n        )\n        self.__case_id = self.__case_id or str(uuid.uuid4())\n        self.__log_path = self.__log_path or os.path.join(\n            self.__project_meta.RootDir, \"logs\", f\"{self.__case_id}.run.log\"\n        )\n        log_handler = logger.add(self.__log_path, level=\"DEBUG\")\n    \n        # parse config name\n        config_variables = self.__config.variables\n        if param:\n            config_variables.update(param)\n        config_variables.update(self.__session_variables)\n        self.__config.name = parse_data(\n            self.__config.name, config_variables, self.__project_meta.functions\n        )\n    \n        if USE_ALLURE:\n            # update allure report meta\n            allure.dynamic.title(self.__config.name)\n            allure.dynamic.description(f\"TestCase ID: {self.__case_id}\")\n    \n        logger.info(\n            f\"Start to run testcase: {self.__config.name}, TestCase ID: {self.__case_id}\"\n        )\n    \n        try:\n>           return self.run_testcase(\n                TestCase(config=self.__config, teststeps=self.__teststeps)\n            )\n\ne:\\python\\lib\\site-packages\\httprunner\\runner.py:455: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ne:\\python\\lib\\site-packages\\httprunner\\runner.py:357: in run_testcase\n    extract_mapping = self.__run_step(step)\ne:\\python\\lib\\site-packages\\httprunner\\runner.py:295: in __run_step\n    step_data = self.__run_step_request(step)\ne:\\python\\lib\\site-packages\\httprunner\\runner.py:208: in __run_step_request\n    resp_obj.validate(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <httprunner.response.ResponseObject object at 0x03EC02B0>\nvalidators = [{'equal': ['status_code', 200, '']}, {'equal': ['body.name', 'jiangchen', '']}, {'equal': ['body.pwd', '123', '']}]\nvariables_mapping = {'request': {'allow_redirects': True, 'cookies': {}, 'data': None, 'json': None, ...}, 'response': <httprunner.response.ResponseObject object at 0x03EC02B0>}\nfunctions_mapping = {}\n\n    def validate(\n        self,\n        validators: Validators,\n        variables_mapping: VariablesMapping = None,\n        functions_mapping: FunctionsMapping = None,\n    ) -> NoReturn:\n    \n        variables_mapping = variables_mapping or {}\n        functions_mapping = functions_mapping or {}\n    \n        self.validation_results = {}\n        if not validators:\n            return\n    \n        validate_pass = True\n        failures = []\n    \n        for v in validators:\n    \n            if \"validate_extractor\" not in self.validation_results:\n                self.validation_results[\"validate_extractor\"] = []\n    \n            u_validator = uniform_validator(v)\n    \n            # check item\n            check_item = u_validator[\"check\"]\n            if \"$\" in check_item:\n                # check_item is variable or function\n                check_item = parse_data(\n                    check_item, variables_mapping, functions_mapping\n                )\n                check_item = parse_string_value(check_item)\n    \n            if check_item and isinstance(check_item, Text):\n                check_value = self._search_jmespath(check_item)\n            else:\n                # variable or function evaluation result is \"\" or not text\n                check_value = check_item\n    \n            # comparator\n            assert_method = u_validator[\"assert\"]\n            assert_func = get_mapping_function(assert_method, functions_mapping)\n    \n            # expect item\n            expect_item = u_validator[\"expect\"]\n            # parse expected value with config/teststep/extracted variables\n            expect_value = parse_data(expect_item, variables_mapping, functions_mapping)\n    \n            # message\n            message = u_validator[\"message\"]\n            # parse message with config/teststep/extracted variables\n            message = parse_data(message, variables_mapping, functions_mapping)\n    \n            validate_msg = f\"assert {check_item} {assert_method} {expect_value}({type(expect_value).__name__})\"\n    \n            validator_dict = {\n                \"comparator\": assert_method,\n                \"check\": check_item,\n                \"check_value\": check_value,\n                \"expect\": expect_item,\n                \"expect_value\": expect_value,\n                \"message\": message,\n            }\n    \n            try:\n                assert_func(check_value, expect_value, message)\n                validate_msg += \"\\t==> pass\"\n                logger.info(validate_msg)\n                validator_dict[\"check_result\"] = \"pass\"\n            except AssertionError as ex:\n                validate_pass = False\n                validator_dict[\"check_result\"] = \"fail\"\n                validate_msg += \"\\t==> fail\"\n                validate_msg += (\n                    f\"\\n\"\n                    f\"check_item: {check_item}\\n\"\n                    f\"check_value: {check_value}({type(check_value).__name__})\\n\"\n                    f\"assert_method: {assert_method}\\n\"\n                    f\"expect_value: {expect_value}({type(expect_value).__name__})\"\n                )\n                message = str(ex)\n                if message:\n                    validate_msg += f\"\\nmessage: {message}\"\n    \n                logger.error(validate_msg)\n                failures.append(validate_msg)\n    \n            self.validation_results[\"validate_extractor\"].append(validator_dict)\n    \n        if not validate_pass:\n            failures_string = \"\\n\".join([failure for failure in failures])\n>           raise ValidationFailure(failures_string)\nE           httprunner.exceptions.ValidationFailure: assert body.pwd equal 123(str)\t==> fail\nE           check_item: body.pwd\nE           check_value: 123456(str)\nE           assert_method: equal\nE           expect_value: 123(str)\n\ne:\\python\\lib\\site-packages\\httprunner\\response.py:270: ValidationFailure"}, "description": "TestCase ID: dafc813c-8436-4021-ae33-7a2cfc03b96c", "steps": [{"name": "step: 测试login接口1", "status": "passed", "start": 1606138135263, "stop": 1606138135279}, {"name": "step: test233433", "status": "broken", "statusDetails": {"message": "httprunner.exceptions.ValidationFailure: assert body.pwd equal 123(str)\t==> fail\ncheck_item: body.pwd\ncheck_value: 123456(str)\nassert_method: equal\nexpect_value: 123(str)\n", "trace": "  File \"e:\\python\\lib\\site-packages\\httprunner\\runner.py\", line 357, in run_testcase\n    extract_mapping = self.__run_step(step)\n  File \"e:\\python\\lib\\site-packages\\httprunner\\runner.py\", line 295, in __run_step\n    step_data = self.__run_step_request(step)\n  File \"e:\\python\\lib\\site-packages\\httprunner\\runner.py\", line 208, in __run_step_request\n    resp_obj.validate(\n  File \"e:\\python\\lib\\site-packages\\httprunner\\response.py\", line 270, in validate\n    raise ValidationFailure(failures_string)\n"}, "start": 1606138135279, "stop": 1606138135294}], "attachments": [{"name": "stderr", "source": "e9bd7f41-8cf5-4ef8-828f-6640e2bebd71-attachment.txt", "type": "text/plain"}], "start": 1606138135247, "stop": 1606138135294, "uuid": "b6b5345e-a94b-42b3-b9e5-584db539f014", "historyId": "f11e9be2613869d1b3e993e5321849a4", "testCaseId": "a945d1b93a462e8c2c55ae26fd91ca44", "fullName": "PycharmProjects.zixueday1.study.httprunners.login1_test.TestCaseLogin1#test_start", "labels": [{"name": "parentSuite", "value": "PycharmProjects.zixueday1.study.httprunners"}, {"name": "suite", "value": "login1_test"}, {"name": "subSuite", "value": "TestCaseLogin1"}, {"name": "host", "value": "USER-20190609FY"}, {"name": "thread", "value": "6548-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "PycharmProjects.zixueday1.study.httprunners.login1_test"}]}